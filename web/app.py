"""
MT5 Web Data Downloader - Windows Version
‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MetaTrader 5 (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Windows ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
"""

from flask import Flask, render_template, request, jsonify
import MetaTrader5 as mt
import pandas as pd
from datetime import datetime
import os
import subprocess
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from claude_code_sdk import query, ClaudeCodeOptions

# Load environment variables
load_dotenv()

app = Flask(__name__)

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏à‡∏≤‡∏Å environment variables
# ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô Error
required_env_vars = ['DIR', 'LOGIN', 'PWD', 'SERVER']
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}. Please check your .env file.")

MT5_CONFIG = {
    'DIR': os.getenv('DIR'),
    'LOGIN': int(os.getenv('LOGIN')),
    'PWD': os.getenv('PWD'),
    'SERVER': os.getenv('SERVER')
}

def connect_mt5():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MetaTrader 5"""
    path = f"C:/Program Files/{MT5_CONFIG['DIR']}/terminal64.exe"
    if not mt.initialize(path=path, login=MT5_CONFIG['LOGIN'],
                         server=MT5_CONFIG['SERVER'], password=MT5_CONFIG['PWD']):
        return False, mt.last_error()
    return True, None

def get_all_symbols():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MT5"""
    symbols = mt.symbols_get()
    if symbols is None:
        return []

    symbol_list = []
    for symbol in symbols:
        if symbol.visible:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ symbols ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Market Watch
            symbol_list.append({
                'name': symbol.name,
                'description': symbol.description,
                'path': symbol.path
            })

    symbol_list.sort(key=lambda x: x['name'])
    return symbol_list

def save_historical_data(symbol, timeframe, timeframe_name, num_candles=None):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5"""

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏° timeframe
    if num_candles is None:
        candle_counts = {
            'M1': 500,   # 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            'M5': 500,   # 1.7 ‡∏ß‡∏±‡∏ô
            'M15': 500,  # 5 ‡∏ß‡∏±‡∏ô
            'M30': 500,  # 10 ‡∏ß‡∏±‡∏ô
            'H1': 168,   # 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
            'H4': 180,   # 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            'D1': 90     # 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        }
        num_candles = candle_counts.get(timeframe_name, 500)

    rates = mt.copy_rates_from_pos(symbol, timeframe, 0, num_candles)

    if rates is None:
        return None, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {timeframe_name} ‡πÑ‡∏î‡πâ"

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    df['symbol'] = symbol
    df['timeframe'] = timeframe_name

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    df['body'] = abs(df['close'] - df['open'])
    df['upper_shadow'] = df['high'] - df[['open', 'close']].max(axis=1)
    df['lower_shadow'] = df[['open', 'close']].min(axis=1) - df['low']
    df['is_bullish'] = df['close'] > df['open']
    df['change_percent'] = ((df['close'] - df['open']) / df['open']) * 100

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    columns_order = ['time', 'symbol', 'timeframe', 'open', 'high', 'low', 'close',
                     'tick_volume', 'spread', 'real_volume', 'body', 'upper_shadow',
                     'lower_shadow', 'is_bullish', 'change_percent']
    df = df[columns_order]

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ (descending)
    df = df.sort_values('time', ascending=False).reset_index(drop=True)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{symbol}_{timeframe_name}_{num_candles}candles_{timestamp}.csv"
    filepath = os.path.join('downloads', filename)

    os.makedirs('downloads', exist_ok=True)
    df.to_csv(filepath, index=False, encoding='utf-8-sig')

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
    summary = {
        'filename': filename,
        'filepath': filepath,
        'candles_count': len(df),
        'time_range': f"{df['time'].min()} ‡∏ñ‡∏∂‡∏á {df['time'].max()}",
        'min_price': float(df['low'].min()),
        'max_price': float(df['high'].max()),
        'bullish_candles': int(df['is_bullish'].sum()),
        'bearish_candles': int((~df['is_bullish']).sum())
    }

    return summary, None


# ==================== ROUTES ====================

@app.route('/')
def index():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"""
    return render_template('index.html')

@app.route('/api/symbols')
def api_symbols():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ symbols"""
    connected, error = connect_mt5()
    if not connected:
        return jsonify({'error': f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ: {error}'}), 500

    symbols = get_all_symbols()
    mt.shutdown()

    return jsonify({'symbols': symbols})

@app.route('/api/analyze', methods=['POST'])
def api_analyze():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Claude Code SDK"""
    print(f"üöÄ [ANALYZE] Starting analysis...")

    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request
        data = request.json
        symbol = data.get('symbol')
        timeframes = data.get('timeframes', [])
        keep_files = os.getenv('KEEP_CSV_FILES', 'false').lower() == 'true'

        print(f"üìä [ANALYZE] {symbol} | Timeframes: {timeframes} | Keep: {keep_files}")

        if not symbol:
            return jsonify({'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å symbol'}), 400

        if not timeframes:
            return jsonify({'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å timeframe ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'}), 400

        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        connected, error = connect_mt5()
        if not connected:
            print(f"‚ùå [ANALYZE] MT5 connection failed: {error}")
            return jsonify({'error': f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ: {error}'}), 500

        print("‚úÖ [ANALYZE] MT5 connected")

        # Mapping timeframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MT5 ‡∏à‡∏£‡∏¥‡∏á
        timeframe_map = {
            'M1': (mt.TIMEFRAME_M1, 'M1'),
            'M5': (mt.TIMEFRAME_M5, 'M5'),
            'M15': (mt.TIMEFRAME_M15, 'M15'),
            'M30': (mt.TIMEFRAME_M30, 'M30'),
            'H1': (mt.TIMEFRAME_H1, 'H1'),
            'H4': (mt.TIMEFRAME_H4, 'H4'),
            'D1': (mt.TIMEFRAME_D1, 'D1')
        }

        download_results = []
        download_errors = []
        downloaded_files = []

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ timeframe
        for tf in timeframes:
            if tf in timeframe_map:
                mt_tf, tf_name = timeframe_map[tf]
                summary, error = save_historical_data(symbol, mt_tf, tf_name)

                if summary:
                    print(f"‚úÖ [ANALYZE] {tf}: {summary['candles_count']} candles")
                    download_results.append(summary)
                    downloaded_files.append(summary['filepath'])
                else:
                    print(f"‚ùå [ANALYZE] {tf} failed: {error}")
                    download_errors.append(f"{tf_name}: {error}")

        mt.shutdown()

        if not download_results:
            print(f"‚ùå [ANALYZE] No data downloaded")
            return jsonify({
                'success': False,
                'errors': download_errors
            }), 500

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        analysis_data = []
        for file_path in downloaded_files:
            try:
                df = pd.read_csv(file_path)
                if len(df) > 0:
                    symbol = df['symbol'].iloc[0] if 'symbol' in df.columns else 'Unknown'
                    timeframe = df['timeframe'].iloc[0] if 'timeframe' in df.columns else 'Unknown'

                    file_info = {
                        'filename': Path(file_path).name,
                        'symbol': symbol,
                        'timeframe': timeframe,
                        'candles_count': len(df),
                        'date_range': f"{df['time'].min()} ‡∏ñ‡∏∂‡∏á {df['time'].max()}" if 'time' in df.columns else 'Unknown',
                        'min_price': float(df['low'].min()) if 'low' in df.columns else 0,
                        'max_price': float(df['high'].max()) if 'high' in df.columns else 0,
                        'bullish_candles': int(df['is_bullish'].sum()) if 'is_bullish' in df.columns else 0,
                        'bearish_candles': int((~df['is_bullish']).sum()) if 'is_bullish' in df.columns else 0
                    }
                    analysis_data.append(file_info)
            except Exception as e:
                print(f"‚ùå [ANALYZE] Error processing file: {e}")
                continue

        print(f"üß† [ANALYZE] Starting Claude AI analysis...")

        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Claude Code SDK
        try:
            result = run_claude_analysis(analysis_data)
            print("‚úÖ [ANALYZE] Claude AI completed")

            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤ config ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö
            if not keep_files:
                for file_path in downloaded_files:
                    try:
                        os.remove(file_path)
                    except:
                        pass
                print("üóëÔ∏è [ANALYZE] CSV files cleaned up")

            print("üéâ [ANALYZE] Analysis completed!")
            return jsonify({
                'success': True,
                'analysis_result': result,
                'files_analyzed': len(analysis_data),
                'files_info': analysis_data,
                'files_kept': keep_files,
                'download_errors': download_errors
            })

        except Exception as e:
            print(f"‚ùå [ANALYZE] Error: {e}")
            if not keep_files:
                for file_path in downloaded_files:
                    try:
                        os.remove(file_path)
                    except:
                        pass

            return jsonify({
                'success': False,
                'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}'
            }), 500

    except Exception as e:
        print(f"‚ùå [ANALYZE] Error: {e}")
        return jsonify({
            'success': False,
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'
        }), 500

def run_claude_analysis(data):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5 ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏î‡πâ‡∏ß‡∏¢ Claude Code SDK"""
    if not data:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Claude
    main_symbol = data[0]['symbol']
    summary_text = f"üìä **{main_symbol} - {len(data)} Timeframes**\n\n"

    for i, item in enumerate(data, 1):
        summary_text += f"{i}. **{item['timeframe']}** ({item['candles_count']} ‡πÅ‡∏ó‡πà‡∏á): {item['date_range']}\n"
        summary_text += f"   - ‡∏£‡∏≤‡∏Ñ‡∏≤: {item['min_price']:.2f} - {item['max_price']:.2f} USD\n"
        summary_text += f"   - ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß: {item['bullish_candles']} | ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á: {item['bearish_candles']}\n\n"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Claude Code SDK
    prompt = f"""
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {main_symbol} ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å MT5 Web Data Downloader

    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤:
    {summary_text}

    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå downloads ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

    ## üìà **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**

    ### 1. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (Trend Analysis)**
    - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ timeframe
    - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö short-term vs long-term trend
    - ‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

    ### 2. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Momentum**
    - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Å‡∏ß‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (volatility)
    - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á momentum ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ timeframe

    ### 3. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Support & Resistance**
    - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß
    - Zone ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    - ‡∏Å‡∏≤‡∏£ breakout ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

    ### 4. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Pattern**
    - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
    - Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢
    - ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ timeframe

    ### 5. **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Risk & Opportunity**
    - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î
    - ‡∏£‡∏∞‡∏î‡∏±‡∏ö Risk/Reward ‡∏ó‡∏µ‡πà‡∏î‡∏µ
    - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á Stop Loss ‡πÅ‡∏•‡∏∞ Take Profit

    ### 6. **‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå**
    - ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÉ‡∏Å‡∏•‡πâ
    - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏ö‡∏ï‡∏≤
    - ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö

    ‡∏´‡∏≤‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢
    """

    # ‡πÅ‡∏™‡∏î‡∏á prompt ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ Claude
    print("üìù [CLAUDE] Prompt being sent:")
    print("="*50)
    print(prompt[:500] + "..." if len(prompt) > 500 else prompt)
    print("="*50)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Claude Code SDK
    web_folder = Path(__file__).parent  # ‡πÉ‡∏ä‡πâ current directory ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå app.py
    options = ClaudeCodeOptions(
        cwd=str(web_folder),
        allowed_tools=["Read", "Glob", "Bash", "Grep"],
        system_prompt="‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Senior Financial Analyst ‡πÅ‡∏•‡∏∞ Technical Analysis Expert ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gold ‡πÅ‡∏•‡∏∞ Forex"
    )

    try:
        print("üöÄ [CLAUDE] Sending to Claude Code SDK...")
        result = ""

        # ‡∏£‡∏±‡∏ô async generator ‡πÉ‡∏ô sync context
        async def get_response():
            response = ""
            async for message in query(prompt=prompt, options=options):
                response += message
            return response

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á event loop ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # ‡∏ñ‡πâ‡∏≤ loop ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏ä‡πâ run_in_executor
                import concurrent.futures
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(asyncio.run, get_response())
                    result = future.result()
            else:
                result = loop.run_until_complete(get_response())
        except RuntimeError:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ event loop ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            result = asyncio.run(get_response())

        print(f"‚úÖ [CLAUDE] Received {len(result)} characters")
        return result.strip()

    except Exception as e:
        print(f"‚ùå [CLAUDE] Error: {e}")
        return "Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Claude Code SDK ‡πÑ‡∏î‡πâ"

if __name__ == '__main__':
    app.run(debug=True, port=5000)